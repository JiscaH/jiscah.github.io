devtools::load_all(".")

data(SimGeno_example, Ped_HSg5, LH_HSg5)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# CalcPairLL

MR <- GetMaybeRel(SimGeno_example, LifeHistData = LH_HSg5)

Pairs = cbind(MR$MaybePar[1:20, c("ID1", "ID2", "Sex1", "Sex2", "AgeDif")], focal = "PO")

test <- CalcPairLL(Pairs, GenoM=SimGeno_example, Plot=FALSE)  # OK!


GenoM = SimGeno_example
Pedigree = Ped_HSg5  # NULL
dropEachPar = FALSE
AgePrior = NULL
Specs = NULL
Complex = "full"
Err = 1e-4
ErrFlavour = "version2.0"
Tassign = 0.5
Tfilter = -2.0
quiet = FALSE
Plot = TRUE



test <- CalcPairLL(Pairs, GenoM=SimGeno_example, Plot=FALSE)  # OK!


MR2 <- GetMaybeRel(SimGeno_example, LifeHistData = LH_HSg5, Module = "ped")

test2 <- CalcPairLL(Pairs, GenoM=SimGeno_example, Pedigree = Ped_HSg5)  # OK?
# LLR focal/U not OK (1020 - 1045).

test2b <- CalcPairLL(Pairs, GenoM=SimGeno_example, Pedigree = Ped_HSg5,
                     dropEachPar = TRUE)


SeqOUT <- sequoia(SimGeno_example, LH_HSg5)
test3 <- CalcPairLL(Pairs, GenoM=SimGeno_example, Pedigree = SeqOUT$PedigreePar)
# Error in dum.TMP$Renamed[[1]] : subscript out of bounds
# > fixed.



#~~~~~~~~~~~~~~~~~

Geno.griffin <- SimGeno(Ped_griffin)
MR.g <- GetMaybeRel(Geno.griffin, LifeHistData = SeqOUT_griffin$LifeHist,
                    Module = "ped")

Pairs.g <- cbind(MR.g$MaybeRel[, c("ID1", "ID2", "Sex1", "Sex2", "AgeDif")],
                 focal = ifelse(MR.g$MaybeRel$TopRel=="PO", "PO", "HS"))
# 519 pairs

test.g1 <- CalcPairLL(Pairs.g, GenoM=Geno.griffin)
# Error in CalcPairLL(Pairs.g, GenoM = Geno.griffin) :
#     ERROR! ***CheckRel kA /= kB!***


# TODO: test G-D & D-D



# TODO: GetMaybeRel: pre-fortran speed



#~~~~~~~~~~~~~~~~~
# test CalcOHLLR: ridiculously slow even when CalcLLR = FALSE

Geno.griffin <- SimGeno(Ped_griffin, SnpError = 0.01)

griff.OH <- CalcOHLLR(Ped_griffin, Geno.griffin, CalcLLR = FALSE)
# OK.


# sheep: not OK.
setwd("E:/Soay sheep/Sheep 2020")
load("Sequoia_out_2019-06-21.RData")   # incl. GenoM2
DBped <- read.table("sys_PedigreeCombined.txt", header=TRUE, stringsAsFactors=FALSE,
                    sep="\t", na.strings="")

Ped.DB.OH <- CalcOHLLR(Pedigree = DBped[DBped$ID %in% rownames(GenoM2),
                                        c("ID", "ConsensusMumID", "DadID")],
                       GenoM = GenoM2,
                       CalcLLR = FALSE)
# fixed the worst, but prep still takes 5x as long as actual counting
# >> don't call initiate when CalcLLR=FALSE ?


###  debug ####
Pedigree = DBped[DBped$ID %in% rownames(GenoM2),
                                        c("ID", "ConsensusMumID", "DadID")]
GenoM = GenoM2
CalcLLR = FALSE
LifeHistData = NULL
AgePrior = FALSE
Err = 1e-4
ErrFlavour = "version2.0"
Tassign = 0.5
Tfilter = -2.0
Complex = "full"
quiet = FALSE




#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# pairLL example, griffins

data(Ped_griffin, SeqOUT_griffin, package="sequoia")
Geno.griffin <- SimGeno(Ped_griffin, nSnp=200, SnpError = 0.01, ParMis=0.4)

system.time(MR <- GetMaybeRel(GenoM = Geno.griffin,
                  LifeHistData = SeqOUT_griffin$LifeHist,
                  Module = "par",
                  Err = 0.001))   # 1.33 sec, should be OK in example (?)
head(MR$MaybePar)

TenPairs <- MR$MaybePar[1:10, c("ID1", "ID2", "Sex1", "Sex2", "AgeDif")]
PairLL <- CalcPairLL(Pairs = rbind( cbind(TenPairs, focal = "PO"),
                                    cbind(TenPairs, focal = "HS"),
                                    cbind(TenPairs, focal = "GP")),
                     GenoM = Geno.griffin,
                     Err = 0.001)
# Error in plot.window(...) : infinite axis extents [GEPretty(-inf,inf,5)]

PairLL[c(1, 11, 21), ]
#            ID1         ID2 Sex1 Sex2 AgeDif focal        PO        FS       HS        GP        FA       HA         U TopRel      LLR
# 1  i118_2006_M i043_2003_M    2    2      3    PO -145.3761 -152.1487 -150.414 -160.4845 -154.3801 -150.414 -172.9347     PO 5.037877
# 11 i118_2006_M i043_2003_M    2    2      3    HS -145.3761  222.0000 -150.414 -149.2484 -160.4845 -150.414 -172.9347     PO 3.872303
# 21 i118_2006_M i043_2003_M    2    2      3    GP -145.3761 -152.1487 -150.414 -150.7083 -154.3801 -150.414 -172.9347     PO 5.037877


# > LL(FS)==222 : HSHA, HSGP, FAHA more likely than FS
# > LL(GP) higher when focal=HS: GP via 'other' parent also considered
# > LL(FA) higher when focal=PO: FAHA, or FS of 'other' parent
# > when focal relationship is impossible (777), LL for other relationships aren't calculated


## effect of assumed genotyping error
PairLL.E1e5 <-CalcPairLL(Pairs = cbind(TenPairs, focal = "PO"),
                         GenoM = Geno.griffin, Err = 1e-5) #, Plot=FALSE)
PairLL.E01 <-CalcPairLL(Pairs = cbind(TenPairs, focal = "PO"),
                         GenoM = Geno.griffin, Err = 0.1, Plot=FALSE)

rbind("Err_0.00001" = PairLL.E1e5[1,],
      "Err_0.001" = PairLL[1,],
      "Err_0.10" = PairLL.E01[1,])
# higher presumed Err --> smaller LLR;
# becomes as/more likely to be FS than HS

## effect of age difference
PairAges <- data.frame(MR$MaybePar[1:5, c("ID1", "ID2", "Sex1", "Sex2")],
                       AgeDiff = c(0:3, NA),  # NA,
                       focal = "PO")
PairLL.a <- CalcPairLL(Pairs = PairAges,
                     GenoM = Geno.griffin, Err = 0.001, Plot=FALSE)

# crashes in call *after* PairLL.a  --> some issue with allocate/deallocate ?

# issue is with AgeDiff = NA
# problem due to same pair with agediff=NA & known agediff, or NA in general?
# --> problem seems with the former.  >> fixed.

TenPairs$AgeDif <- NA
PairLL <- CalcPairLL(Pairs = cbind(TenPairs, focal = "HS"),
                     GenoM = Geno.griffin,
                     Err = 0.001)



# only crashes when plot=TRUE?
for (x in 1:10) {
  cat("\n", x, "\n")
  bloop <- CalcPairLL(Pairs = rbind( cbind(TenPairs, focal = "PO"),
                                    cbind(TenPairs, focal = "HS"),
                                    cbind(TenPairs, focal = "GP")),
                     GenoM = Geno.griffin,
                     Err = 0.001, Plot = FALSE)

  PairLL.a <- CalcPairLL(Pairs = PairAges,
                     GenoM = Geno.griffin, Err = 0.001, Plot=FALSE)

}





# Is problem actually really in the fortran part?

Pairs = PairAges
GenoM = Geno.griffin
Pedigree = NULL
dropEachPar = FALSE
AgePrior = NULL
Specs = NULL
Complex = "full"
Err = 0.001
ErrFlavour = "version2.0"
Tassign = 0.5
Tfilter = -2.0
quiet = FALSE
Plot = TRUE


AP <- MakeAgePrior(MaxAgeParent = 3,
                             quiet = FALSE, Plot = FALSE)
PlotAgePrior(AP)


APX <- MakeAgePrior(MaxAgeParent = 3,
                             quiet = FALSE, Plot = TRUE)



# from: demo(error.catching)
tryCatch.W.E <- function(expr)
{
   W <- NULL
   w.handler <- function(w){ # warning handler
	W <<- w
	invokeRestart("muffleWarning")
   }
   list(value = withCallingHandlers(tryCatch(expr, error = function(e) e),
				     warning = w.handler),
	 warning = W)
}


#~~~~~~~~~~~~~~~~~~~~~~~~~~~
# test parents: real, dummy, drop

PairLL.A <- CalcPairLL(Pairs = cbind(TenPairs, focal = "PO"),
                         GenoM = Geno.griffin, Err = 0.001, Plot=FALSE,
                         Pedigree = NULL,
                         dropEachPar = FALSE)   # OK


PairLL <- CalcPairLL(Pairs = cbind(TenPairs, focal = "PO"),
                         GenoM = Geno.griffin, Err = 0.001, Plot=FALSE,
                         Pedigree = NULL,
                         dropEachPar = TRUE)  # OK

#~~~~
SeqGrif <- sequoia(Geno.griffin, SeqOUT_griffin$LifeHist, Module = "par", Err=0.005)
# Error in if (lowMid[i]) { : missing value where TRUE/FALSE needed
# in: SmoothAP()
# >> fixed. pedigree has obvious errors; AP(FS,9) = 4.19 while maxAgePO = 5.
# >> TODO: check during MakeAgePrior & throw warning


PairLL <- CalcPairLL(Pairs = cbind(TenPairs, focal = "PO"),
                         GenoM = Geno.griffin, Err = 0.001, Plot=FALSE,
                         Pedigree = SeqGrif$PedigreePar,
                         dropEachPar = FALSE)   # OK

PairLL <- CalcPairLL(Pairs = cbind(TenPairs, focal = "HS"),
                         GenoM = Geno.griffin, Err = 0.001, Plot=FALSE,
                         Pedigree = SeqGrif$PedigreePar,
                         dropEachPar = FALSE)  # OK

PairLL <- CalcPairLL(Pairs = cbind(TenPairs, focal = "PO"),
                         GenoM = Geno.griffin, Err = 0.001, Plot=FALSE,
                         Pedigree = SeqGrif$PedigreePar,
                         dropEachPar = TRUE)   # OK
