#=============================================================================
#' @title Turn character pedigree into numeric pedigre
#'
#' @description Genotyped individuals get rownumber in genotype matrix,
#'   non-genotyped individuals either all get an arbitrary negative number
#'   (\code{DoDummies = 'new'}) or only individuals with a dummy ID get the
#'   corresponding negative number (\code{DoDummies = 'old'}). Note that the
#'   number series will overlap for dummy males and dummy females.
#'
#' @param Pedigree dataframe with id - dam - sire. It is assumed
#'   \code{\link{PedPolish}} has been called beforehand so that column names are
#'   correct and all columns are as.character.
#' @param gID  vector with IDs of SNP-genotyped individuals
#' @param DoDummies  'new', 'old', or 'no' (ignore all non-genotyped
#'   individuals)
#' @param DumPrefx Prefix used to identify dummies when \code{DoDummies = 'old'}
#'
#' @return a list with
#'   \item{PedPar}{An nInd x 2 matrix with the numeric IDs of parents of
#'     genotyped individuals}
#'   \item{DumPar}{A matrix with parents of dummies, see
#'     \code{\link{FoldSibGPs}}}
#'   \item{Renamed}{a length-2 list (dams, sires) with each element a dataframe
#'     with columns: 'name' (original character ID), 'num' (number ID, negative)
#'     for each dummified individual}
#'   \item{Nd}{a length 2 vector, no. dummies found/created for dams and sires}
#'
#' @details  uses \code{\link{GetDummifiable}} with \code{minSibSize = "1sib"}
#'
#' @keywords internal

PedToNum <- function(Pedigree = NULL,
                     gID = NULL,
                     DoDummies = "new",
                     DumPrefix = c("F0", "M0"))
{
  if (is.null(Pedigree)) {
    if (is.null(gID))  stop("PedToNum needs Pedigree and/or gID")
    return( list(PedPar = rep(0, 2*length(gID)),
                 DumPar = rep(0, 4*as.integer(length(gID)/2)),
                 Renamed = NA,
                 Nd = 0) )

  } else if (!is.null(gID) && !all(gID %in% Pedigree$id)) {
    Pedigree <- rbind(Pedigree,
                      data.frame(id = gID[!gID %in% Pedigree$id],
                                 dam = NA,
                                 sire = NA))
  }


  if (!DoDummies %in% c("old", "new", "no"))
    stop("'DoDummies' must be 'old', 'new', or 'no'")
  DPnc <- nchar(DumPrefix)

  # Identify dummies ----   # TODO: integrate with bit below?
  IDcat <- matrix(NA, nrow(Pedigree), 3)
  if (DoDummies == "new") {
    Dummifiable <- GetDummifiable(Pedigree[,1:3], gID, minSibSize = "1sib")
    for (x in 1:3) {
      IDcat[,x] <- ifelse(Pedigree[,x] %in% gID, "G",
                          ifelse(Pedigree[,x] %in% unlist(Dummifiable), "D",
                                 "X"))
    }
    Nd <- sapply(Dummifiable, length)
    if (any(substr(Pedigree$id,1,DPnc[1])==DumPrefix[1]) |
        any(substr(Pedigree$id,1,DPnc[2])==DumPrefix[2])) {
      stop("Didn't expect to find prefix ", DumPrefix[1], " or ",
           DumPrefix[2], "among pedigree ids.")
    }

  } else if (DoDummies %in% c("old", "no")) {
    Nd <- rep(0, 2)
    for (x in 1:3) {
      IDcat[,x] <- c("G", "D", "O", "X")[ unclass(getGDO(Pedigree[,x], gID, DumPrefix)) ]
      if (x>1 & DoDummies == "old")  Nd[x-1] <- length(unique(na.exclude(Pedigree[IDcat[,x]=="D", x])))
    }
  }


  # names to numbers ----
  NumPed <- matrix(0, nrow(Pedigree), 4,
                   dimnames=list(Pedigree$id, c("id", "dam", "sire", "sex")))
  # sex used by FoldSibsGPs() to tell female/male dummies apart

  # genotyped
  GenoNums <- setNames(seq_along(gID), gID)
  for (x in 1:3) {
    NumPed[IDcat[,x]=="G", x] <- GenoNums[Pedigree[IDcat[,x]=="G", x]]
  }

  # dummies
  Renamed <- list(dam = NULL, sire=NULL)
  DumNameToNum <- function(x, ncp=1) -as.numeric(substr(x,ncp+1,nchar(x)))

  for (k in 1:2) {
    if (Nd[k] == 0)  next
    if (Nd[k] > 9999)  stop("Too many dummies")

    if (DoDummies == "new") {
      Renamed[[k]] <- data.frame(name = Dummifiable[[k]],
                                 num = -(1:Nd[k]),
                                 stringsAsFactors = FALSE)
    }

    for (x in 1:3) {
      if (x!=1 & x!=k+1)  next
      if (DoDummies == "old") {
        these <- IDcat[,x]=="Dummy" & substr(Pedigree[,x], 1, DPnc[k]) == DumPrefix[k]
        NumPed[these, x] <- DumNameToNum(Pedigree[these, x], DPnc[k])

      } else if (DoDummies == "new") {
        these <- Pedigree[,x] %in% Dummifiable[[k]]
        NumPed[these, x] <- Renamed[[k]][match(Pedigree[these,x], Renamed[[k]]$name), "num"]
      }
      if (x==1)  NumPed[these, "sex"] <- k
    }
  }

  # fold GPs & out ----
  PedPar <- NumPed[match(gID, Pedigree$id), 2:3]
  if (DoDummies %in% c("old", "new")) {
    DumPar <- FoldSibGPs(PedNum = NumPed, Ng = length(gID), Nd = Nd)
  } else {
    DumPar <- rep(0, 4*as.integer(length(gID)/2))
  }

  return( namedlist(PedPar, DumPar, Renamed, Nd) )
}

#=============================================================================
#=============================================================================
#' @title get individual category: genotyped, dummy, observed
#'
#' @details In contrast to \code{\link{GetDummifiable}}, this function only
#'   identifies individuals who currently have a dummy code
#'
#' @param id  character vector with ids, may include NA (as in parent columns in
#'   pedigree)
#' @param gID  character vector with ids of genotyped individuals
#' @param DumPrefix  prefix that defines dummy individuals
#'
#' @return a factor with length equal to id, and levels Genotyped, Dummy,
#'   Observed, None
#'
#' @keywords internal


getGDO <- function(id, gID = NULL, DumPrefix = c("F0", "M0"))
{
  GDO <- ifelse(is.na(id),  "None",
                ifelse(id %in% gID,  "Genotyped",
                       NA))
  if (!is.null(DumPrefix)) {
    for (p in 1:2) {
      GDO[substr(id,1,nchar(DumPrefix[p])) == DumPrefix[p]] <- "Dummy"
    }
  }
  if (!is.null(gID)) {
    GDO[is.na(GDO)] <- "Observed"
  } else {
    GDO[is.na(GDO)] <- "Genotyped"   # assume genotyped
  }
  GDO <- factor(GDO, levels=c("Genotyped", "Dummy", "Observed", "None"), ordered=TRUE)
}



#=============================================================================
#=============================================================================
#' @title Fold IDs of sibship grandparents
#'
#' @description Fold IDs of sibship grandparents into a 2 x nInd/2 x 2 array, as
#'   they are stored in Fortran, and then stretch this into a vector that can be
#'   passed to Fortran and easily be transformed back into said 3D array.
#'
#' @param PedNum pedigree, ids replaced by numbers, dummies negative
#' @param Ng  no. genotyped indivs
#' @param Nd length 2 vector, no. female & male dummies
#'
#' @return an integer vector, with missing values as 0.
#'
#' @keywords internal

FoldSibGPs <- function(PedNum, Ng, Nd)
{
  DumParRF <- rep(0, 4*as.integer(Ng/2))
  if (any(Nd > 0)) {
    SibshipGPs <- array(0, dim=c(2,max(Nd),2),
                        dimnames=list(c("grandma", "granddad"),
                                      1:max(Nd), c("mat", "pat")))
    for (k in 1:2) {
      if (Nd[k] == 0) next
      # pedigree subset: parents of dummy dams (k=1) or dummy sires (k=2)
      PedDum.k <- PedNum[PedNum[,"id"] < 0 & PedNum[,"sex"] == k, , drop=FALSE]

      SibshipGPs[,1:Nd[k],k] <- t(PedDum.k[order(-PedDum.k[,"id"]), 2:3])
      for (s in 1:Nd[k]) {
        for (g in 1:2) {
          x <- (k-1)*2*as.integer(Ng/2) + (s-1)*2 + g
          DumParRF[x] <- SibshipGPs[g,s,k]
        }
      }
    }
  }
  return( DumParRF )
}



#=============================================================================
#=============================================================================
#' @title Change numbers pedigree back to IDs
#'
#' @description Reverse \code{\link{PedToNum}}
#'
#' @param x vector with numbers
#' @param k 1=dam, 2=sire, needed to distinguish dummy females from dummy males
#' @param gID  vector with IDs of SNP-genotyped individuals; rownames of
#'   genotype matrix in the exact order
#' @param DumPrefix length-2 character vector to make dummy IDs
#'
#' @return A character vector with IDs
#'
#' @keywords internal

NumToID <- function(x, k=0, gID=NULL, DumPrefix = c("F", "M"))
{
  if (length(x)==0)  return()
  if (any(is.na(x) | !is.wholenumber(x)))  stop("x must be whole numbers, something went wrong")
  Nd.k <- ifelse(all(x >= 0), 0, abs(min(x, na.rm=TRUE)))

  if (Nd.k > 9999)  stop("\nMore than 9999 dummies! Cannot parse output.")
  if (Nd.k > 999 && nchar(DumPrefix[k])==1)
    warning("\nMore than 999 dummies! Please use DummyPrefix of >1 character to avoid ambiguity",
            immediate. = TRUE)  # stop or warning?

  if (length(k)==1)  k <- rep(k, length(x))
  if (!all(k[x<0] %in% 1:2))  stop("Invalid k")

  ID <- sapply(seq_along(x), function(i) {
    ifelse(x[i] > 0,
           gID[x[i]],
           ifelse(x[i] < 0,
                  paste0(DumPrefix[k[i]], formatC(-x[i], width=4, flag=0)),
                  NA))
  })
  return( ID )
}
