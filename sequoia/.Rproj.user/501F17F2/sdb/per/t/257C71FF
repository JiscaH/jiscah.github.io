{
    "collab_server" : "",
    "contents" : "#' @title Convert genotype file\n#'\n#' @description Convert a genotype file from PLINK's .raw, or Colony's\n#' 2-column-per-marker format, to sequoia's 1-column-per-marker format.\n#'\n#' @details The following formats can be specified by 'InFormat' and\n#' 'OutFormat':\n#'  \\itemize{\n#'   \\item{col: }{No header row, 1 descriptive column, genotypes are coded as\n#'    numeric values, missing as 0, in 2 columns per marker.}\n#'    \\item{ped: }{No header row, 6 descriptive columns, genotypes are coded as\n#'    A, C, T, G, missing as 0, in 2 columns per marker. NOTE: not yet\n#'    implented, use PLINK's --recodeA to convert this format to \"raw\".}\n#'    \\item{raw: }{Header row with SNP names, 6 descriptive columns,\n#'     genotypes are coded as 0, 1, 2, missing as NA, in 1 column per marker.}\n#'    \\item{seq: }{No header row, 1 descriptive column genotypes are coded as\n#'    0, 1, 2, missing as -9, in 1 column per marker.}\n#'  }\n#'\n#' @param InFile character string with name of genotype file to be converted\n#' @param InFormat One of \"raw\", \"col\" or \"seq\", see Details.\n#' @param OutFile character string with name of converted file. If NA, return\n#'   matrix with genotypes in console; if NULL, write to \"GenoForSequoia.txt\".\n#' @param OutFormat as InFormat. Currently raw -> seq, col -> seq and seq ->\n#' col are implemented.\n#' @param UseFID Use the family ID column in the PLINK file. The\n#'   resulting ids (rownames of GenoM) will be in the form FID__IID.\n#' @param FIDsep characters inbetween FID and IID in composite-ID. By default a\n#'  double underscore is used, to avoid problems when some IIDs contain an\n#'   underscore. Only used when UseFID=TRUE.\n#' @param quiet suppress messages\n#'\n#' @return A genotype matrix in the specified output format. If 'OutFile' is\n#'   specified, the matrix is written to this file and nothing is returned\n#'   inside R.\n#'\n#' @author Jisca Huisman, \\email{jisca.huisman@gmail.com}\n#'\n#' @seealso \\code{\\link{LHConvert}, \\link{PedStripFID}}\n#'\n#' @examples\n#' \\dontrun{\n#' # Requires PLINK installed & in system PATH:\n#'\n#' # tinker with window size, window overlap and VIF to get a set of\n#' # 400 - 800 markers (100-200 enough for just parentage):\n#' system(\"cmd\", input = \"plink --file mydata --indep 50 5 2\")\n#'\n#' system(\"cmd\", input = \"plink --file mydata --extract plink.prune.in\n#'   --recodeA --out PlinkOUT\")\n#'\n#' GenoM <- GenoConvert(InFile = \"PlinkOUT.raw\")\n#' }\n#'\n#' @export\n\nGenoConvert <- function(InFile = NULL,\n                        InFormat = \"raw\",\n                        OutFile = NA,\n                        OutFormat = \"seq\",\n                        UseFID = FALSE,\n                        FIDsep = \"__\",\n                        quiet = FALSE) {\n  if (OutFormat == \"seq\" & is.null(OutFile)) {\n    OutFile <- \"GenoForSequoia.txt\"\n  } else if (is.null(OutFile)) {\n    stop(\"please provide 'OutFile'\")\n  }\n  if (is.null(InFile)) stop(\"please provide 'InFile'\")\n  if (!file.exists(InFile)) stop(\"cannot find 'InFile'\")\n  if (UseFID & FIDsep %in% c(\"\", \" \", \"\\t\", \"\\n\")) stop(\"sep can not be whitespace\")\n\n  if (interactive() & !quiet & !is.na(OutFile)) {\n    if (file.exists(OutFile)) {\n      ANS <- readline(prompt = paste(\"WARNING: \", OutFile, \" will be overwritten.\",\n                                     \"Press <N> to abort, or any other key to continue.\"))\n    } else {\n      ANS <- readline(prompt = paste(\"Genotypes will be written to \", OutFile,\n                                     \" . Press <N> to abort, or any other key to continue.\"))\n    }\n    if (substr(ANS, 1, 1) %in% c(\"N\", \"n\")) stop()\n  }\n\n  GenoTmp <- readLines(InFile)\n\n  if (OutFormat == \"seq\") {\n    if (InFormat == \"raw\") {\n      TmpL    <- strsplit(GenoTmp[-1], split = \" \")  # skip row w marker names\n      GenoOUT <- plyr::ldply(TmpL, function(x) x[-c(1, 3:6)])\n      GenoTmp2 <- apply(GenoOUT[, -1], 2,\n                        function(x) as.numeric(gsub(\"NA\", \"-9\", x)))\n      if (UseFID) {\n        FID <- sapply(TmpL, function(x) x[1])\n        rownames(GenoTmp2) <- paste(FID, GenoOUT[, 1], sep=FIDsep)\n      } else {\n        rownames(GenoTmp2) <- GenoOUT[, 1]\n      }\n      if (!is.na(OutFile)) {\n        utils::write.table(GenoTmp2, file = OutFile,\n                  row.names = FALSE, col.names = FALSE, quote = FALSE)\n      } else {\n       return(GenoTmp2)\n      }\n\n    } else if (InFormat == \"col\") {\n      TmpL    <- strsplit(GenoTmp, split = \" \")\n      if (length(TmpL[[1]])==1) {\n        TmpL <- strsplit(GenoTmp, split = \"\\t\")\n      }\n      if (length(TmpL[[1]])==1) {\n        TmpL <- strsplit(GenoTmp, split = \",\")\n      }\n      if (length(TmpL[[1]])==1) {\n        TmpL <- strsplit(GenoTmp, split = \";\")\n      }\n      GC <- plyr::ldply(TmpL)\n      IDs_geno <- GC[, 1]\n      GC <- as.matrix(GC[, -1])\n      GC[GC==0] <- NA\n\n      GCA <- array(dim=c(2, nrow(GC), ncol(GC)/2))\n      GCA[1,,] <- GC[, seq(1,ncol(GC)-1,2)]\n      GCA[2,,] <- GC[, seq(2,ncol(GC),2)]\n\n      Alleles <- apply(GCA, 3, function(x) unique(na.exclude(as.character(x))))\n      if(any(sapply(Alleles, length)>2)) stop(\"Some SNPs have >2 alleles\")\n      if(any(sapply(Alleles, length)==1)) warning(\"Some SNps are monomorphic\")\n\n      GCF <- array(dim=dim(GCA))\n      for (i in 1:dim(GCA)[[3]]) {\n        GCF[,,i] <- as.numeric(as.factor(GCA[,,i]))-1\n      }\n      GS <- apply(GCA, 2:3, sum)\n      GS[is.na(GS)] <- -9\n      row.names(GS) <- IDs_geno\n      if (!is.na(OutFile)) {\n        utils::write.table(GS, OutFile, quote = FALSE, col.names = FALSE)\n      } else return(GS)\n\n    } else if (InFormat == \"ped\") {\n      stop(\"not yet implemented\")\n    } else {\n      stop(\"not implemented\")\n    }\n\n  } else if (InFormat == \"seq\") {\n      if (OutFormat == \"col\") {\n        dc <- list(\"0\" = c(1,1), \"1\" = c(1,2), \"2\" = c(2,2), \"-9\" = c(0,0))\n        TmpL <- strsplit(GenoTmp, split=\" \")\n        Geno <- plyr::ldply(TmpL)\n        IDs_geno <- Geno[,1]\n        Geno <- as.matrix(Geno[, -1])\n        GenoA <- array(dim=c(nrow(Geno), 2, ncol(Geno)))\n        for (i in 1:nrow(Geno)) {\n          GenoA[i,,] <- sapply(Geno[i,], function(z) dc[[z]])\n        }\n        GenoM <- matrix(GenoA, nrow(Geno))\n        row.names(GenoM) <- IDs_geno\n        if (!is.na(OutFile)) {\n          utils::write.table(GenoM, OutFile, quote=FALSE, col.names=FALSE)\n        } else return(GenoM)\n\n      } else {\n        stop(\"not yet implemented\")\n      }\n  } else {\n    stop(\"not implemented\")\n  }\n}\n\n\n\n\n#######################################################################\n#######################################################################\n\n#' @title Extract sex and birthyear from PLINK file\n#'\n#' @description Convert the first six columns of a PLINK .fam, .ped or\n#'  .raw file into a three-column lifehistory file for sequoia. Optionally\n#'   FID and IID are combined.\n#'\n#' @details The first 6 columns of PLINK .fam, .ped and .raw files are by\n#' default FID - IID - father ID (ignored) - mother ID (ignored) - sex -\n#' phenotype.\n#'\n#' Use with caution, as not extensively tested yet.\n#'\n#' @param InFile character string with name of genotype file to be converted\n#' @param UseFID Use the family ID column. The resulting ids (rownames of\n#'  GenoM) will be in the form FID__IID\n#' @param SwapSex change the coding from PLINK default (1=male, 2=female) to\n#'  sequoia default (1=female, 2=male); any other numbers are set to NA\n#' @param FIDsep characters inbetween FID and IID in composite-ID. By default a\n#'  double underscore is used, to avoid problems when some IIDs contain an\n#'   underscore. Only used when UseFID=TRUE.\n#' @param LHIN  dataframe with additional sex and birth year info. In case of\n#'   conflicts, LHIN takes priority, with a warning. If UseFID=TRUE, ids are\n#'   assumed to be as FID__IID.\n#'\n#' @return a dataframe with id, sex and birth year, which can be used as input\n#'  for \\code{\\link{sequoia}}\n#'\n#' @seealso \\code{\\link{GenoConvert}}, \\code{\\link{PedStripFID}} to reverse\n#'  \\code{UseFID}\n#'\n#' @export\n\nLHConvert <- function(InFile = NULL, UseFID = FALSE,\n                      SwapSex = TRUE, FIDsep=\"__\", LHIN=NULL)\n{\n  if (is.null(InFile)) stop(\"please provide 'InFile'\")\n  if (!file.exists(InFile)) stop(\"cannot find 'InFile'\")\n  if (UseFID & FIDsep %in% c(\"\", \" \", \"\\t\", \"\\n\")) stop(\"sep can not be whitespace\")\n\n  ncol <- length(scan(InFile, nlines=1, what=\"real\", quiet=TRUE))\n  TMP <- scan(InFile, skip=1, what=as.list(c(rep(\"character\", 2), rep(\"numeric\", 4),\n                             rep(\"NULL\", ncol-6))), quiet=TRUE)\n\n  LH <- data.frame(id = TMP[[2]],\n                    Sex = TMP[[5]],\n                    BY = TMP[[6]],\n                    stringsAsFactors=FALSE)\n  if (SwapSex) {\n    LH$Sex <- ifelse(LH$Sex==1, 2,\n                   ifelse(LH$Sex==2, 1,\n                        NA))\n  }\n\n  if (UseFID) {\n    IDX <- data.frame(id.old = TMP[[2]],\n                        id.new = paste(TMP[[1]], TMP[[2]], sep=FIDsep),\n                        stringsAsFactors=FALSE)\n    LH <- merge(LH, IDX, by.x=\"id\", by.y=\"id.old\", all.x=TRUE)\n    LH$id <- ifelse(!is.na(LH$id.new), LH$id.new, LH$id)\n    LH <- LH[, c(\"id\", \"Sex\", \"BY\")]\n  }\n\n  if (!is.null(LHIN)) {\n    names(LHIN) <- c(\"id\", \"Sex\", \"BY\")\n    LH$Sex[!LH$Sex %in% c(1,2)] <- NA\n    LHIN$Sex[!LHIN$Sex %in% c(1,2)] <- NA\n    LH$BY[LH$BY < 0] <- NA\n    LHIN$BY[LHIN$BY < 0] <- NA\n\n    chk <- merge(LH, LHIN, by=\"id\")\n    if (any(!is.na(chk$Sex.x) & !is.na(chk$Sex.y) & chk$Sex.x != chk$Sex.y)) {\n      warning(paste(\"There are\", sum(chk$Sex.x != chk$Sex.y, na.rm=T), \"sex mismatches\"))\n    } else if (any(!is.na(chk$BY.x) & !is.na(chk$BY.y) & chk$BY.x != chk$BY.y)) {\n      warning(paste(\"There are\", sum(chk$BY.x != chk$BY.y, na.rm=T),\n                    \"birth year mismatches\"))\n    }\n    LH <- Merge(LH, LHIN, by=\"id\", overwrite=TRUE, all=TRUE)\n  }\n\n  LH\n}\n\n",
    "created" : 1526030785571.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2345442573",
    "id" : "257C71FF",
    "lastKnownWriteTime" : 1526031074,
    "last_content_update" : 1526031074164,
    "path" : "E:/Sequoia/Rversion/sequoia/R/GenoConvert.R",
    "project_path" : "R/GenoConvert.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}