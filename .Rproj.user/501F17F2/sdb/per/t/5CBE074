{
    "collab_server" : "",
    "contents" : "#' @title SNP summary statistics\n#'\n#' @description Estimate allele frequency (AF), missingness and Mendelian\n#' errors per SNP.\n#'\n#' @details Calculation of these summary statistics can be done in PLINK, and\n#' SNPs with low minor allele freuqency or high missigness should be filtered\n#' out using PLINK prior to pedigree reconstruction. This function is merely\n#' provided as an aid to inspect the relationship between AF, missingness\n#' and error to find a suitable combination of thresholds to use.\n#'\n#' The underlying genotyping error can not be easily estimated from the number\n#' of Mendelian errors, as many errors may go undetected and a single error in\n#'  a prolific individual can result in a high number of Mendelian errors.\n#'  Moreover, a high error rate may interfere with pedigree reconstruction, and\n#'  succesful assignment will be biased towards parents with lower error count.\n#'\n#' @param GenoM  Genotype matrix, in sequoia's format: 1 column per SNP, 1 row\n#' per individual, genotypes coded as 0/1/2/-9, and rownames giving individual\n#' IDs.\n#' @param Ped  a dataframe with 3 columns: ID - parent1 - parent2. Additional\n#'  columns and non-genotyped individuals are ignored. Only used to estimate\n#'  the error rate.\n#'\n#' @return a matrix with a number of rows equal to the number of SNPs\n#'  (=number of columns of GenoM) and columns\n#' \\item{AF}{Allele frequency of the 'second allele' (the one for which the\n#'   homozygote is coded 2)}\n#' \\item{Mis}{Proportion of missing calles}\n#' \\item{ER}{(only when Ped provided) number of Mendelian errors in parent-\n#'  offspring pairs and parent-parent-offspring trios, e.g.parent is AA and\n#'  offspring is aa.}\n#'\n#' @seealso  \\code{\\link{GenoConvert}}\n#'\n#' @export\n\nSnpStats <- function(GenoM, Ped=NULL) {\n  Mis <- apply(GenoM, 2, function(x) sum(x==-9))/nrow(GenoM)\n  AF <- apply(GenoM, 2, function(x) sum(x[x!=-9])/(2*sum(x!=-9)))\n\n  if (!is.null(Ped)) {\n    Par <- Ped[,1:3]\n    for (i in 1:3) {\n      Par[,i] <- as.character(Par[,i])\n      Par[!Par[,i] %in% rownames(GenoM), i] <- NA\n    }\n    Par <- Par[!is.na(Par[,1]), ]\n    ER <- OHP(GenoM, Par)\n    OUT <- cbind(AF, Mis, ER)\n\n  } else {\n    OUT <- cbind(AF, Mis)\n  }\n  OUT\n}\n\n\n#===========\n\nOHP <- function(GenoM, Par) {\n  GenoMx <- GenoM\n  GenoMx[GenoMx==-9] <- 3\n  GenoMx <- rbind(GenoMx, \"NA\" = 3)\n  GenoMx <- GenoMx +1\n  Par$RowI <- sapply(Par$id, function(x, y) which(y == x), y = rownames(GenoMx))\n  Par$RowD <- with(Par, sapply(dam, function(x, y) ifelse(is.na(x), nrow(GenoMx),\n                                               which(y == x)), y = rownames(GenoMx)))\n  Par$RowS <- with(Par, sapply(sire, function(x, y) ifelse(is.na(x), nrow(GenoMx),\n                                            which(y == x)), y = rownames(GenoMx)))\n\n  # mendelian errors\n  MER <- array(0, dim=c(4,4,4))  # offspr - mother - father\n  MER[1:3,,1] <- matrix(c(0,1,2, 0,0,1, 1,0,1, 0,0,1), 3,4)  # 0/1/2/NA\n  MER[1:3,,2] <- matrix(c(0,0,1, 0,0,0, 1,0,0, 0,0,0), 3,4)\n  MER[1:3,,3] <- matrix(c(1,0,1, 1,0,0, 2,1,0, 1,0,0), 3,4)\n  MER[1:3,,4] <- matrix(c(0,0,1, 0,0,0, 1,0,0, 0,0,0), 3,4)\n\n  ERcount <- matrix(0, nrow(Par), ncol(GenoMx))\n  for (i in 1:nrow(Par)) {\n    ERcount[i, ] <- MER[cbind(GenoMx[Par$RowI[i], ],\n                          GenoMx[Par$RowD[i], ],\n                          GenoMx[Par$RowS[i], ])]\n  }\n  apply(ERcount, 2, sum, na.rm=T)\n}\n",
    "created" : 1526031766001.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4066111038",
    "id" : "5CBE074",
    "lastKnownWriteTime" : 1522255882,
    "last_content_update" : 1522255882,
    "path" : "E:/Sequoia/Rversion/sequoia/R/SNPstats.R",
    "project_path" : "R/SNPstats.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}