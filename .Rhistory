PC <- PedCompare(Ped1 = Ped, Ped2 = SeqOUT$Pedigree)
DataL$PCcounts[r,,,] <- PC$Counts
DataL[[paste0("rep.", r)]] <- c(DataL[[paste0("rep.", r)]],
PC[c("Mismatch", "P2only")])
cat("time: ", DataL$runtime[[r]]["elapsed"],
"ER: ", sum(PC$Counts["TT",c("Mismatch", "P2only"),]),
", AR: ", sum(PC$Counts["TT","Match",])/sum(PC$Counts[c("GT", "DT"),"Total",]), "\n")
}
}
save(DataL, file=paste0("output_simData/Seq_full_OUT_", format(Sys.time(), "%Y-%m-%d_%H%M%S"), ".RData"))
}
for (i in 37:37){  #nrow(CheckSpecs)) {
DataL <- list()
DataL$RunSpecs <- CheckSpecs[i, ]
cat("\n\n\n Specs set  ", i, ":\n")
print(DataL$RunSpecs)
cat("\n")
Ped <- read.table(paste0(CheckSpecs[i, "Ped"],".txt"), header=T, sep="\t", stringsAsFactors=FALSE)
LH <- read.table(paste0(CheckSpecs[i, "LH"],".txt"), header=T, sep="\t", stringsAsFactors=FALSE)
DataL$SimSpecs <- CheckSpecs[i, c("nSnp", "ParMis", "PropLQ",
"MisHQ", "MisLQ", "ErHQ", "ErLQ")]
# todo: ifelse(!is.na(), CheckSpecs[i,], default value)
DataL$SimSpecs <- na.exclude(DataL$SimSpecs)
DataL$runtime <- list()
DataL$PCcounts <- array(dim=c(CheckSpecs[i,"Repeat"], 7, 5, 2))
DataL$runOK <- rep(TRUE, CheckSpecs[i,"Repeat"])
for (r in 1:CheckSpecs[i,"Repeat"]) {
cat("\n", r, "... ")
GenoM <- do.call(SimGeno, c(list(Ped = Ped), DataL$SimSpecs))
write.table(GenoM, file=paste0("bugfixes_2018-08/PedHSg5_pm08_crash/Geno_",r,".txt"),
quote=FALSE, row.names=TRUE, col.names=FALSE)
DataL$runtime[[r]] <- system.time(TMP <- tryCatch.W.E(do.call(sequoia,
c(list(GenoM = GenoM, LifeHistData = LH, quiet = TRUE),
CheckSpecs[i, c("MaxSibIter", "Err", "MaxMismatch",
"Tfilter", "Tassign", "MaxSibshipSize",
"Complex", "UseAge", "FindMaybeRel", "CalcLLR")]))))
if ("message" %in% names(TMP$value) | !"Specs" %in% names(TMP$value)) {
DataL$runOK[r] <- FALSE
DataL[[paste0("rep.", r)]] <- TMP
cat("FAILED \n")
} else {
SeqOUT <- TMP$value
#    DataL[[paste0("rep.", r)]] <- c(list(GenoM = GenoM),
DataL[[paste0("rep.", r)]] <- SeqOUT[c("Specs", "Pedigree", "MaybeRel")]
#, "PedigreePar", "MaybeParent",
PC <- PedCompare(Ped1 = Ped, Ped2 = SeqOUT$Pedigree)
DataL$PCcounts[r,,,] <- PC$Counts
DataL[[paste0("rep.", r)]] <- c(DataL[[paste0("rep.", r)]],
PC[c("Mismatch", "P2only")])
cat("time: ", DataL$runtime[[r]]["elapsed"],
"ER: ", sum(PC$Counts["TT",c("Mismatch", "P2only"),]),
", AR: ", sum(PC$Counts["TT","Match",])/sum(PC$Counts[c("GT", "DT"),"Total",]), "\n")
}
}
save(DataL, file=paste0("output_simData/Seq_full_OUT_", format(Sys.time(), "%Y-%m-%d_%H%M%S"), ".RData"))
}
Sys.which('pdflatex')
?Sys.which
library(sequoia)
setwd("E:/Sequoia/Performance_check/bugfixes_2018-08")
Ped <- read.table("../Ped_HSg5.txt", header=T, sep="\t", stringsAsFactors=FALSE)
LH <- read.table("../LH_HSg5.txt", header=T, sep="\t", stringsAsFactors=FALSE)
GenoM <- as.matrix(read.table("PedHSg5_pm08_crash/Geno_1.txt", header=F, row.names=1))
dim(GenoM)
head(GenoM[,1:10])
ParOUT <- sequoia(GenoM = GenoM,
LifeHistData = LH,
MaxSibIter = 0)
PCp <- PedCompare(Ped1 = Ped, Ped2 = ParOUT$PedigreePar)
PCp$Counts
(193+132)/(196+136)
writeSeq(ParOUT, GenoM = GenoM, folder = "PedHSg5_pm08_crash")
Ped2K <- read.table("../Ped_deer2k.txt", header=T, sep="\t", stringsAsFactors=FALSE)
LH2K <- read.table("../LH_deer.txt", header=T, sep="\t", stringsAsFactors=FALSE)
Pedx <-  read.table("Ped3_TooLargeNS/Pedigree_round4.txt", header=T, stringsAsFactors=F)
getwd()
Pedx <-  read.table("Ped3_TooLargeNS/Pedigree_round04.txt", header=T, stringsAsFactors=F)
PCx <- PedCompare(Ped1 = Ped, Ped2 = Pedx)
PCx <- PedCompare(Ped1 = Ped2K, Ped2 = Pedx)
PCx$Counts
Pedx <-  read.table("Ped3_TooLargeNS/Pedigree_round02.txt", header=T, stringsAsFactors=F)
PCx <- PedCompare(Ped1 = Ped2K, Ped2 = Pedx)
PCx$Counts
PCx$P2only
PCx$MergedPed[which(PCx$MergedPed$dam.2=="F0069"), ]
Pedx <-  read.table("Ped3_TooLargeNS/Pedigree_round01.txt", header=T, stringsAsFactors=F)
PCx <- PedCompare(Ped1 = Ped2K, Ped2 = Pedx)
PCx$Counts
Pedxe <-  read.table("Ped3_TooLargeNS/Er1e-4/Pedigree_round01.txt", header=T, stringsAsFactors=F)
PCxe <- PedCompare(Ped1 = Ped2K, Ped2 = Pedxe)
PCxe$Counts
Pedx <-  read.table("Ped3_TooLargeNS/Pedigree_round02.txt", header=T, stringsAsFactors=F)
PCx <- PedCompare(Ped1 = Ped2K, Ped2 = Pedx)
PCx$Counts
OutFiles <- list.files(path="./output_simData", pattern="Seq_full_OUT_")
MaxRep <- 10
SpecsDF <- as.data.frame(matrix(NA, length(OutFiles), 20))  # 20: no. variables
CountsA <- array(dim=c(length(OutFiles), MaxRep, 7, 5, 2),
dimnames=list(OutFiles, 1:MaxRep, c("GG", "GD", "GT", "DG", "DD", "DT", "TT"),
c("Total", "Match", "Mismatch", "P1only", "P2only"), c("mat", "pat")))
TimesM <- matrix(NA, length(OutFiles), MaxRep,
dimnames=list(OutFiles, 1:MaxRep))
OutFiles <- list.files(path="./output_simData", pattern="Seq_full_OUT_")
for (x in 1:length(OutFiles)) {
load(paste0("output_simData/", OutFiles[x]))
SpecsDF[x, ] <- DataL$RunSpecs
CountsA[x,,,,] <- DataL$PCcounts
TimesM[x, 1:length(DataL$runtime)] <- sapply(1:length(DataL$runtime),
function(x) DataL$runtime[[x]]["elapsed"])
}
getwd()
cd..
setwd("..")
OutFiles <- list.files(path="./output_simData", pattern="Seq_full_OUT_")
length(OutFiles)
MaxRep <- 10
SpecsDF <- as.data.frame(matrix(NA, length(OutFiles), 20))  # 20: no. variables
CountsA <- array(dim=c(length(OutFiles), MaxRep, 7, 5, 2),
dimnames=list(OutFiles, 1:MaxRep, c("GG", "GD", "GT", "DG", "DD", "DT", "TT"),
c("Total", "Match", "Mismatch", "P1only", "P2only"), c("mat", "pat")))
TimesM <- matrix(NA, length(OutFiles), MaxRep,
dimnames=list(OutFiles, 1:MaxRep))
for (x in 1:length(OutFiles)) {
load(paste0("output_simData/", OutFiles[x]))
SpecsDF[x, ] <- DataL$RunSpecs
CountsA[x,,,,] <- DataL$PCcounts
TimesM[x, 1:length(DataL$runtime)] <- sapply(1:length(DataL$runtime),
function(x) DataL$runtime[[x]]["elapsed"])
}
rownames(SpecsDF) <- OutFiles
names(SpecsDF) <- names(DataL$RunSpecs)
rm(DataL)
View(SpecsDF)
dim(SpecsDF)
dim(unique(SpecsDF[,rownames(SpecsDF)!="FindMaybeRel"]))
dim(unique(SpecsDF[, names(SpecsDF)!="FindMaybeRel"]))
?duplicated
SpecsDF <- unique(SpecsDF[, names(SpecsDF)!="FindMaybeRel"])
ARER <- array(dim = c(length(OutFiles), 3, 2, 2),
dimnames = list(OutFiles, c("mean", "min", "max"),
c("AR", "ER"), c("GG", "TT")))
for (x in 1:length(OutFiles)) {
ARER[x, , "AR", "GG"] <- MQ(apply(CountsA[x,,"GG","Match",]/CountsA[x,,"GG","Total",], 1, mean))
ARER[x, , "AR", "TT"] <- MQ(apply(CountsA[x,,"TT","Match",]/
apply(CountsA[x,,c("GT", "DT"), "Total",], c(1,3), sum), 1, mean))
ARER[x, , "ER", "GG"] <- MQ(apply((CountsA[x,,"GG","Mismatch",] + CountsA[x,,"GG","P2only",])/
CountsA[x,,"GG","Total",], 1, mean))
ARER[x, , "ER", "TT"] <- MQ(apply((CountsA[x,,"TT","Mismatch",] + CountsA[x,,"TT","P2only",])/
CountsA[x,,"TT","Total",], 1, mean))
}
MQ <- function(x) c(mean(x, na.rm=T), range(x, na.rm=T))
l <- function(x,a=.4) adjustcolor(x, alpha.f=a)
ErBars <- function(x,M, col=l(1)) {
arrows(x0=x, y0=M[,1], y1=M[,2], length=.03, angle=90, code=3, col=col)
}
ARER <- array(dim = c(length(OutFiles), 3, 2, 2),
dimnames = list(OutFiles, c("mean", "min", "max"),
c("AR", "ER"), c("GG", "TT")))
for (x in 1:length(OutFiles)) {
ARER[x, , "AR", "GG"] <- MQ(apply(CountsA[x,,"GG","Match",]/CountsA[x,,"GG","Total",], 1, mean))
ARER[x, , "AR", "TT"] <- MQ(apply(CountsA[x,,"TT","Match",]/
apply(CountsA[x,,c("GT", "DT"), "Total",], c(1,3), sum), 1, mean))
ARER[x, , "ER", "GG"] <- MQ(apply((CountsA[x,,"GG","Mismatch",] + CountsA[x,,"GG","P2only",])/
CountsA[x,,"GG","Total",], 1, mean))
ARER[x, , "ER", "TT"] <- MQ(apply((CountsA[x,,"TT","Mismatch",] + CountsA[x,,"TT","P2only",])/
CountsA[x,,"TT","Total",], 1, mean))
}
if (any(ARER < 0 & ARER > -Inf, na.rm=TRUE) |
any(ARER > 1 & ARER < Inf, na.rm=TRUE))  stop("something fishy")
selrows <- function(focal,
PED = "Ped_HSg5",
snp = 200,
pm = 0.4,   # ParMis  (prop. non-genotyped parents)
gEr = 1e-4, # simulated genotyping error ErHQ
sIter = 10,
sEr = 1e-4, # sequoia assumed error rate Er
TF = -2,
TA = .5,
cmplx = "full",
MinR = 10,  # min. no. repeats
Specs = SpecsDF) {
xx <- with(Specs,
switch(focal,
nSnp = which(ParMis==pm & Ped == PED & Repeat>=MinR &
Tfilter==TF & Tassign==TA & MaxSibIter==sIter &
Complex==cmplx & ErHQ==gEr & Err==sEr),
ParMis = which(nSnp==snp & Ped == PED & Repeat>=MinR &
Tfilter==TF & Tassign==TA & MaxSibIter==sIter &
Complex==cmplx  & ErHQ==gEr & Err==sEr),
Prop.LQ = which(nSnp==snp &  Ped == PED & Repeat>=MinR &
Tfilter==TF & Tassign==TA & MaxSibIter==sIter &
Complex==cmplx  & ErHQ==gEr & Err==sEr),
nInd = which(nSnp==snp & ParMis==pm & Repeat>=MinR & Tfilter==TF &
Tassign==TA & !is.na(nInd) & MaxSibIter==sIter &
Complex==cmplx  & ErHQ==gEr & Err==sEr),
Tfilter = which(nSnp==snp & ParMis==pm & Ped == PED & Repeat>=MinR &
Tassign==TA & MaxSibIter>=sIter & Complex==cmplx  & ErHQ==gEr & Err==sEr),
Tassign = which(nSnp==snp & ParMis==pm & Ped == PED & Repeat>=MinR &
Tfilter==TF & MaxSibIter>=sIter & Complex==cmplx  & ErHQ==gEr & Err==sEr),
ErHQ = which(nSnp==snp & ParMis==pm & Ped == PED & Repeat>=MinR &
Tassign==TA & Tfilter==TF & MaxSibIter==sIter & Complex==cmplx & Err==sEr)))
xx <- xx[order(SpecsDF[xx, focal])]
xx
}
source("functions_plot_ER-AR-time.R")
LTY <- c(T=1, P=1, E=2, C=2, "F"=3, M=1, F2=3, CM=2)   # Total, Parentage, Exclusion, Colony, FRANz
LWD <- c(T=2, P=2, E=1, C=1, "F"=2, M=1.5, F2=2, CM=1)
PCH <- c(T=16, P=21, E=22, C=17, "F"=23, M=21, F2=9, CM=24)
LWD.pt <- c(T=2, P=2, E=1, C=1, "F"=1, M=1.5, F2=1, CM=1)
BG.pt <- c(T=1, P="white", E="white", C=1, "F"="white",
M="darkgrey", F2=1, CM="darkgrey")
COL <- c(T=1, P=1, E=1, C=1, "F"=1, M=1, F2=1, CM=1)
PEDS <- c("Ped_AN", "Ped_HSg5", "Ped_deer2k")
Com <- array(dim = c(nrow(SpecsDF), 3, 2,2),
dimnames = list(OutFiles,
c("Mean", "Min", "Max"),
c("GG", "TT"),  # dummy's separate too?
c("AR", "Er")))
OutFiles <- list.files(path="./output_simData", pattern="Seq_full_OUT_")
MaxRep <- 10
# economise, otherwise HUGE list
SpecsDF <- as.data.frame(matrix(NA, length(OutFiles), 20))  # 20: no. variables
CountsA <- array(dim=c(length(OutFiles), MaxRep, 7, 5, 2),
dimnames=list(OutFiles, 1:MaxRep, c("GG", "GD", "GT", "DG", "DD", "DT", "TT"),
c("Total", "Match", "Mismatch", "P1only", "P2only"), c("mat", "pat")))
TimesM <- matrix(NA, length(OutFiles), MaxRep,
dimnames=list(OutFiles, 1:MaxRep))
for (x in 1:length(OutFiles)) {
load(paste0("output_simData/", OutFiles[x]))
SpecsDF[x, ] <- DataL$RunSpecs
CountsA[x,,,,] <- DataL$PCcounts
TimesM[x, 1:length(DataL$runtime)] <- sapply(1:length(DataL$runtime),
function(x) DataL$runtime[[x]]["elapsed"])
}
rownames(SpecsDF) <- OutFiles
names(SpecsDF) <- names(DataL$RunSpecs)
rm(DataL)
superseded <- duplicated(SpecsDF[, names(SpecsDF)!="FindMaybeRel"])
superseded
superseded <- duplicated(SpecsDF[, names(SpecsDF)!="FindMaybeRel"], fromLast=TRUE)
superseded
SpecsDF <- SpecsDF[!superseded, ]
CountsA <- CountsA[!superseded, ]
CountsA <- CountsA[!superseded,,,,]
TimesM <- TimesM[!superseded,]
Com <- array(dim = c(nrow(SpecsDF), 3, 2,2),
dimnames = list(OutFiles,
c("Mean", "Min", "Max"),
c("GG", "TT"),  # dummy's separate too?
c("AR", "Er")))
Com <- array(dim = c(nrow(SpecsDF), 3, 2,2),
dimnames = list(rownames(SpecsDF),
c("Mean", "Min", "Max"),
c("GG", "TT"),  # dummy's separate too?
c("AR", "Er")))
XLAB <- c("nSnp" = "No. SNPs",
"Par.mis" = "Prop. genotyped parents",
"LTX" = "Likelihood threshold",
"LTl" = expression(T["assign"]),
"nInd" = "No. individuals")
XLIM <- list("nSnp" = c(0, 830),
"Par.mis" = c(0, 1),
"LTX" = c(1, 7),
"LTl" = c(0, 2),
"nInd" = c(0, 5e3))
YLAB <- c("AR" = "1 - Assignment rate",
"Er" = "Error rate",
"time" = "Runtime")
PedNames <- c("Pedigree I", "Pedigree II", "Pedigree III")
focal <- "nSnp"
ZV=c("T")
par(mfcol=c(3,3), mai=c(.2, .1, 0, 0), omi=c(.5,.9,.4,.1), xpd=F)
for (p in 1:3) {
xx <- list()
xx[[1]] <- selrows(focal, pm=1, PED=PEDS[p])
cplot(focal, "AR", xx, yax=p==1, xax=FALSE)
mtext(PedNames[p], side=3, line=1)
if (p==1) legend("topright", c("Sequoia", "OH-Excl", "FRANz"),
lty=LTY[ZV], pch=PCH[ZV], lwd=LWD.pt[ZV], pt.bg=BG.pt[ZV],
bg=grey(0.9), cex=1.4)
cplot(focal, "Er", xx, yax=p==1, xax=FALSE)
tplot(focal, xx, ylim=c(.1,10*60), yax=p==1)
}
dim(ARER)
ARER <- array(dim = c(nrow(SpecsDF), 3, 2, 2),
dimnames = list(rownames(SpecsDF), c("mean", "min", "max"),
c("AR", "ER"), c("GG", "TT")))
for (x in 1:length(OutFiles)) {
ARER[x, , "AR", "GG"] <- MQ(apply(CountsA[x,,"GG","Match",]/CountsA[x,,"GG","Total",], 1, mean))
ARER[x, , "AR", "TT"] <- MQ(apply(CountsA[x,,"TT","Match",]/
apply(CountsA[x,,c("GT", "DT"), "Total",], c(1,3), sum), 1, mean))
ARER[x, , "ER", "GG"] <- MQ(apply((CountsA[x,,"GG","Mismatch",] + CountsA[x,,"GG","P2only",])/
CountsA[x,,"GG","Total",], 1, mean))
ARER[x, , "ER", "TT"] <- MQ(apply((CountsA[x,,"TT","Mismatch",] + CountsA[x,,"TT","P2only",])/
CountsA[x,,"TT","Total",], 1, mean))
}
for (x in 1:nrow(SpecsDF)) {
ARER[x, , "AR", "GG"] <- MQ(apply(CountsA[x,,"GG","Match",]/CountsA[x,,"GG","Total",], 1, mean))
ARER[x, , "AR", "TT"] <- MQ(apply(CountsA[x,,"TT","Match",]/
apply(CountsA[x,,c("GT", "DT"), "Total",], c(1,3), sum), 1, mean))
ARER[x, , "ER", "GG"] <- MQ(apply((CountsA[x,,"GG","Mismatch",] + CountsA[x,,"GG","P2only",])/
CountsA[x,,"GG","Total",], 1, mean))
ARER[x, , "ER", "TT"] <- MQ(apply((CountsA[x,,"TT","Mismatch",] + CountsA[x,,"TT","P2only",])/
CountsA[x,,"TT","Total",], 1, mean))
}
ARER <- array(dim = c(nrow(SpecsDF), 3, 2, 2),
dimnames = list(rownames(SpecsDF), c("mean", "min", "max"),
c("AR", "ER"), c("GG", "TT")))
for (x in 1:nrow(SpecsDF)) {
ARER[x, , "AR", "GG"] <- MQ(apply(CountsA[x,,"GG","Match",]/CountsA[x,,"GG","Total",], 1, mean))
ARER[x, , "AR", "TT"] <- MQ(apply(CountsA[x,,"TT","Match",]/
apply(CountsA[x,,c("GT", "DT"), "Total",], c(1,3), sum), 1, mean))
ARER[x, , "ER", "GG"] <- MQ(apply((CountsA[x,,"GG","Mismatch",] + CountsA[x,,"GG","P2only",])/
CountsA[x,,"GG","Total",], 1, mean))
ARER[x, , "ER", "TT"] <- MQ(apply((CountsA[x,,"TT","Mismatch",] + CountsA[x,,"TT","P2only",])/
CountsA[x,,"TT","Total",], 1, mean))
}
dim(ARER)
ARER[,"mean","ER"]
ARER[,"mean","ER",]
?aaply
?melt
OUT <- cbind(SpecsDF,
setNames(ARER[,,"AR","TT"], paste0("AR.", c("mean", "min", "max"))),
setNames(ARER[,,"ER","TT"], paste0("ER.", c("mean", "min", "max"))))
View(OUT)
getwd()
write.table(OUT, file="Specs_ARER_2018-08-09.txt", row.names=TRUE, sep="\t")
paste0("AR.", c("mean", "min", "max"))
bla <- setNames(ARER[,,"AR","TT"], paste0("AR.", c("mean", "min", "max")))
View(bla)
bla <- setNames(as.data.frame(ARER[,,"AR","TT"]), paste0("AR.", c("mean", "min", "max")))
View(bla)
Pedx <-  read.table("Ped3_TooLargeNS/Pedigree_round03.txt", header=T, stringsAsFactors=F)
getwd()
setwd("E:/Sequoia/Performance_check/bugfixes_2018-08")
Pedx <-  read.table("Ped3_TooLargeNS/Pedigree_round03.txt", header=T, stringsAsFactors=F)
PCx <- PedCompare(Ped1 = Ped2K, Ped2 = Pedx)
PCx$Counts
Pedxe <-  read.table("Ped3_TooLargeNS/Er1e-4/Pedigree_round03.txt", header=T, stringsAsFactors=F)
PCxe <- PedCompare(Ped1 = Ped2K, Ped2 = Pedxe)
PCxe$Counts
ARER <- array(dim = c(nrow(SpecsDF), 3, 2, 2),
dimnames = list(rownames(SpecsDF), c("mean", "min", "max"),
c("AR", "ER"), c("GG", "TT")))
for (x in 1:nrow(SpecsDF)) {
ARER[x, , "AR", "GG"] <- MQ(apply(CountsA[x,,"GG","Match",]/CountsA[x,,"GG","Total",], 1, mean))
ARER[x, , "AR", "TT"] <- MQ(apply(CountsA[x,,"TT","Match",]/
apply(CountsA[x,,c("GG","GD","DG","DD"), "Total",], c(1,3), sum), 1, mean))
ARER[x, , "ER", "GG"] <- MQ(apply((CountsA[x,,"GG","Mismatch",] + CountsA[x,,"GG","P2only",])/
CountsA[x,,"GG","Total",], 1, mean))
ARER[x, , "ER", "TT"] <- MQ(apply((CountsA[x,,"TT","Mismatch",] + CountsA[x,,"TT","P2only",])/
CountsA[x,,"TT","Total",], 1, mean))
}
if (any(ARER < 0 & ARER > -Inf, na.rm=TRUE) |
any(ARER > 1 & ARER < Inf, na.rm=TRUE))  stop("something fishy")
OUT <- cbind(SpecsDF,
setNames(as.data.frame(ARER[,,"AR","TT"]), paste0("AR.", c("mean", "min", "max"))),
setNames(as.data.frame(ARER[,,"ER","TT"]), paste0("ER.", c("mean", "min", "max"))))
View(OUT)
write.table(OUT, file="Specs_ARER_2018-08-09.txt", row.names=TRUE, sep="\t")
getwd()
setwd("E:/Sequoia/Performance_check/bugfixes_2018-08")
Ped <- read.table("../Ped_HSg5.txt", header=T, sep="\t", stringsAsFactors=FALSE)
LH <- read.table("../LH_HSg5.txt", header=T, sep="\t", stringsAsFactors=FALSE)
Ped3 <- read.table("PedHSg5/Pedigree_Round03.txt", header=T, stringsAsFactors=F)
PC3 <- PedCompare(Ped1 = Ped, Ped2 = Ped3)
PC3$Counts
Ped3 <- read.table("PedHSg5_pm08_crash/Pedigree_Round03.txt", header=T, stringsAsFactors=F)
PC3 <- PedCompare(Ped1 = Ped, Ped2 = Ped3)
PC3$Counts
Ped2K <- read.table("../Ped_deer2k.txt", header=T, sep="\t", stringsAsFactors=FALSE)
(56+8+107+10)/(833+127+835+127)
table(table(Ped3$dam))
table(table(Ped3$sire))
library(sequoia)
Ped <- read.table("../Ped_HSg5.txt", header=T, sep="\t", stringsAsFactors=FALSE)
LH <- read.table("../LH_HSg5.txt", header=T, sep="\t", stringsAsFactors=FALSE)
GenoM <- SimGeno(Ped = Ped, ParMis = 0.4, nSnp=400)
SeqOUT <- sequoia(GenoM = GenoM,
LifeHistData = LH,
MaxSibIter = 10)
PC <- PedCompare(Ped1 = Ped, Ped2 = SeqOUT$Pedigree)
PC$Counts
GenoM <- SimGeno(Ped = Ped, ParMis = 0.4, nSnp=10)
SeqOUT <- sequoia(GenoM = GenoM,
LifeHistData = LH,
MaxSibIter = 10,
FindMaybeRel = FALSE)
PC <- PedCompare(Ped1 = Ped, Ped2 = SeqOUT$Pedigree)
PC$Counts
?sequoia
library(sequoia)
?sequoia
library(sequoia)
?sequoia
library(sequoia)
?sequoia
library(sequoia)
?sequoia
library(sequoia)
?sequoia
library(sequoia)
?sequoia
library(sequoia)
?sequoia
library(sequoia)
?sequoia
library(sequoia)
?sequoia
library(sequoia)
?sequoia
library(sequoia)
library(sequoia)
library(sequoia)
?sequoia
remove.packages("sequoia")
library(sequoia)
install.packages("E:/Sequoia/Rversion/sequoia_1.1.0.tar.gz", repos = NULL)
install.packages("digest")
install.packages("roxygen2")
install.packages("roxygen2", lib="C:/Program Files/R/R-devel/library")
data(LH_HSg5, SimGeno_example, Ped_HSg5, package="sequoia")
?sequoia
library(sequoia)
?sequoia
SeqOUT <- sequoia(GenoM = SimGeno_example,
LifeHistData = LH_HSg5, MaxSibIter = 10)
install.packages("plyr", lib="C:/Program Files/R/R-devel/library")
SeqOUT <- sequoia(GenoM = SimGeno_example,
LifeHistData = LH_HSg5, MaxSibIter = 10)
names(SeqOUT)
library(sequoia)
?sequoia
data(LH_HSg5, SimGeno_example, Ped_HSg5, package="sequoia")
SeqOUT2 <- sequoia(GenoM = SimGeno_example,
LifeHistData = LH_HSg5, MaxSibIter = 10)
names(SeqOUT2)
install.packages("devtools", lib="C:/Program Files/R/R-devel/library")
install.packages("testthat", lib="C:/Program Files/R/R-devel/library")
install.packages("roxygen2", lib="C:/Program Files/R/R-devel/library")
.libPaths(c("C:\Program Files\R\R-devel\library",  .libPaths()))
.libPaths(c("C:/Program Files/R/R-devel/library",  .libPaths()))
?.libPaths
.libPaths()
install.packages("roxygen2", lib="C:/Program Files/R/R-devel/library")
data(LH_HSg5, SimGeno_example, Ped_HSg5, package="sequoia")
library(sequoia)
?sequoia
SeqOUT <- sequoia(GenoM = SimGeno_example,
LifeHistData = LH_HSg5, MaxSibIter = 0)
remove.packages(plyr)
remove.packages("plyr")
remove.packages("plyr")
install.packages("plyr", lib="C:/Program Files/R/R-devel/library")
SeqOUT <- sequoia(GenoM = SimGeno_example,
LifeHistData = LH_HSg5, MaxSibIter = 0)
remove.packages("Rcpp")
install.packages("Rcpp", lib="C:/Program Files/R/R-devel/library")
remove.packages("roxygen2")
remove.packages("roxygen2")
install.packages("roxygen2", lib="C:/Program Files/R/R-devel/library")
SeqOUT <- sequoia(GenoM = SimGeno_example,
LifeHistData = LH_HSg5, MaxSibIter = 0)
names(SeqOUT)
dim(SeqOUT$PedigreePar)
head(SeqOUT$PedigreePar)
tail(SeqOUT$PedigreePar)
SeqOUT2 <- sequoia(GenoM = SimGeno_example,
LifeHistData = LH_HSg5, MaxSibIter = 10)
SeqOUT2$Pedigree[34:42, ]
vignette("sequoia")
library(xlsx)
library(sequoia)
tryCatch.W.E <- function(expr)
{
W <- NULL
w.handler <- function(w){ # warning handler
W <<- w
invokeRestart("muffleWarning")
}
list(value = withCallingHandlers(tryCatch(expr, error = function(e) e),
warning = w.handler),
warning = W)
}
install.packages("roxygen2")
remove.packages("Rcpp")
install.packages("Rcpp")
.libPaths()
.libPaths()[1:3]
.libPaths(.libPaths[1:3])
.libPaths(.libPaths()[1:3])
2+2
install.packages("roxygen2")
install.packages("Rccp")
install.packages("Rcpp")
install.packages("devtools")
install.packages("E:/Software/roxygen-master.zip", repos = NULL)
.libPaths()
remove.packages("devtools")
remove.packages("devtools")
install.packages("devtools")
install.packages("devtools")
?install.packages
library(xlsx)
install.packages("xlsx")
library(xlsx)
.libPaths
.libPaths()
bla <- .libPaths()
.libPaths(bla[c(5,1:3)])
.libPaths()
