# clean up .nosex & .log files
system('rm geno_batch_*.nosex geno_batch_*.log')
run_impute <- function(x, args)
{
batch_name <- glue::glue('batch_{formatC(x,width=3,flag=0)}')
system(glue::glue('./{install_dir}/imputator {imputator_args} --pedigree {pedigree_file} ',
'--geno geno_{batch_name} --log {batch_name}.log --no-geno-out'))
return('OK')
}
run_impute(1)
system(glue::glue('.{install_dir}/imputator {imputator_args} --pedigree {pedigree_file} ',
'--geno geno_{batch_name} --log {batch_name}.log --no-geno-out'))
batch_name <- glue::glue('batch_{formatC(x,width=3,flag=0)}')
system(glue::glue('.{install_dir}/imputator {imputator_args} --pedigree {pedigree_file} ',
'--geno geno_{batch_name} --log {batch_name}.log --no-geno-out'))
system(glue::glue('{install_dir}/imputator {imputator_args} --pedigree {pedigree_file} ',
'--geno geno_{batch_name} --log {batch_name}.log --no-geno-out'))
system(glue::glue('{install_dir}/imputator {imputator_args} --pedigree {pedigree_file} ',
'--geno geno_{batch_name} --edits-in {batch_name}.edits --no-geno-out'))
system(glue::glue('{install_dir}/imputator {imputator_args} --pedigree {pedigree_file} ',
'--geno geno_{batch_name} --edits-in {batch_name}.edits ',
'--informat PED --no-geno-out'))
system(glue::glue('{install_dir}/imputator {imputator_args} --pedigree {pedigree_file} ',
'--geno geno_{batch_name} --edits-out {batch_name}.edits ',
'--informat PED --no-geno-out'))
run_impute <- function(x, args)
{
batch_name <- glue::glue('batch_{formatC(x,width=3,flag=0)}')
system(glue::glue('{install_dir}/imputator {imputator_args} --pedigree {pedigree_file} ',
'--geno geno_{batch_name} --edits-out {batch_name}.edits ',
'--informat PED --no-geno-out'))
return('OK')
}
args
imp_args = imputator_args
system(glue::glue('{install_dir}/imputator {imp_args} --pedigree {pedigree_file} ',
'--geno geno_{batch_name} --edits-out {batch_name}.edits ',
'--informat PED --no-geno-out'))
system(glue::glue('{install_dir}/imputator {imp_args} --pedigree {pedigree_file} ',
'--geno geno_{batch_name} --edits-out {batch_name}.edits ',
'--informat PED --no-geno-out --quiet'))
cl <- parallel::makeCluster(n_cores)
AllOUT <- parallel::parLapply(cl, X = seq.int(n_cores),
fun = run_impute,
imp_args = imputator_args)
cmd
parallel::stopCluster(cl)
run_impute <- function(x, imp_args)
{
batch_name <- glue::glue('batch_{formatC(x,width=3,flag=0)}')
cmd <- glue::glue('{install_dir}/imputator {imp_args} --pedigree {pedigree_file} ',
'--geno geno_{batch_name} --edits-out {batch_name}.edits ',
'--informat PED --no-geno-out --quiet')
system(cmd)
return('OK')
}
cl <- parallel::makeCluster(n_cores)
AllOUT <- parallel::parLapply(cl, X = seq.int(n_cores),
fun = run_impute,
imp_args = imputator_args)
run_impute <- function(x, imp_args, install_dir=install_dir, pedigree_file=pedigree_file)
{
batch_name <- glue::glue('batch_{formatC(x,width=3,flag=0)}')
cmd <- glue::glue('{install_dir}/imputator {imp_args} --pedigree {pedigree_file} ',
'--geno geno_{batch_name} --edits-out {batch_name}.edits ',
'--informat PED --no-geno-out --quiet')
system(cmd)
return('OK')
}
parallel::stopCluster(cl)
cl <- parallel::makeCluster(n_cores)
AllOUT <- parallel::parLapply(cl, X = seq.int(n_cores),
fun = run_impute,
imp_args = imputator_args)
parallel::stopCluster(cl)
run_impute <- function(x, imp_args, i_dir=install_dir, ped_file=pedigree_file)
{
batch_name <- glue::glue('batch_{formatC(x,width=3,flag=0)}')
cmd <- glue::glue('{i_dir}/imputator {imp_args} --pedigree {ped_file} ',
'--geno geno_{batch_name} --edits-out {batch_name}.edits ',
'--informat PED --no-geno-out --quiet')
system(cmd)
return('OK')
}
cl <- parallel::makeCluster(n_cores)
AllOUT <- parallel::parLapply(cl, X = seq.int(n_cores),
fun = run_impute,
imp_args = imputator_args)
install_dir
parallel_impute <- function(geno_file = NA,      # path to genotype file, without file extension.
#   Currently only ped/map supported
pedigree_file = NA,  # file with id - parent1 - parent2
install_dir = NA,    # directory with imputator.f90, sqa_fileIO.fio, & sqa_general.f90
working_dir = NA,    # directory where the N temporary genotype subfiles will the created
n_cores = 1,         # number of cores = number of subfiles
compilation_args = '-O3',  # optimisation level, or debugging flags
plink_cmd = 'plink',  # command to run plink
imputator_args = '--err 0.001 --T-impute 0',
output_file = 'geno_imputed',
quiet = FALSE)      # messages in R
{
# === compile imputator ====
# check if imputator source files can be found
setwd(install_dir)
for (sf in c('imputator.f90', 'sqa_fileIO.f90', 'sqa_general.f90')) {
if (!file.exists(sf)) stop("Could not find source file ", sf)
}
# compile
system(glue::glue("./gfortran {compilation_args} sqa_general.f90 sqa_fileIO.f90 imputator.f90 -o imputator"))
# TODO? clean up .mod files
# === check number of cores ===
if (!is.null(n_cores) && (!is.numeric(n_cores) || n_cores<1))
stop("n_cores must be a positive number, or NULL")
if (is.null(n_cores) || n_cores>1) {
if (!requireNamespace("parallel", quietly = TRUE)) {
if (interactive() & !quiet) {
message("Installing pkg 'parallel' to speed things up... ")
}
utils::install.packages("parallel")
}
max_cores <- parallel::detectCores()
if (is.null(n_cores)) {
n_cores <- max_cores -1
} else if (n_cores > max_cores) {
n_cores <- max_cores
warning("Reducing 'n_cores' to ", max_cores, ", as that's all you have",
immediate.=TRUE)
}
if (!quiet)  message("Using ", n_cores, " out of ", max_cores, " cores")
}
# === split genotype file ====
# use plink option --extract, requires text file with 1 column with SNP names
# https://www.cog-genomics.org/plink/1.9/filter#snp
# get SNP names from .map file, which has SNP name in 2nd column
# (https://www.cog-genomics.org/plink/1.9/formats#map)
setwd(working_dir)
library(dplyr)
# divide SNPs into (nearly) equal batches
map <- read.table(glue::glue("{geno_file}.map"))
n_snps <- nrow(map)
batch_size <- rep(floor(n_snps/n_cores), n_cores)
n_left <- n_snps - sum(batch_size)
batch_size[1:n_left] <- batch_size[1:n_left] +1
snp_batches <- lapply(1:n_cores, function(x) seq.int(from = c(0,cumsum(batch_size))[x] +1,
length.out = batch_size[x]))
# convenience function: integer to string with 3 characters, with up to 2 leading zeros
c3 <- function(x) formatC(x,width=3,flag=0)
for (x in 1:n_cores) {
write.table(map[snp_batches[[x]], 2],
file=glue::glue('snp_batch_{c3(x)}.txt'),
row.names=FALSE, col.names=FALSE, quote=FALSE)
}
# call plink to create subsets
for (x in 1:n_cores) {
system(glue::glue('{plink_cmd} --file {geno_file} --extract snp_batch_{c3(x)}.txt ',
'--recode --out geno_batch_{c3(x)}'))  # --recode makes .ped + .map
}
# clean up .nosex & .log files
system('rm geno_batch_*.nosex geno_batch_*.log')
# === impute each batch ===
run_impute <- function(x, imp_args, i_dir, ped_file
{
run_impute <- function(x, imp_args, i_dir, ped_file)
{
batch_name <- glue::glue('batch_{formatC(x,width=3,flag=0)}')
cmd <- glue::glue('{i_dir}/imputator {imp_args} --pedigree {ped_file} ',
'--geno geno_{batch_name} --edits-out {batch_name}.edits ',
'--informat PED --no-geno-out --quiet')
system(cmd)
return('OK')
}
parallel::stopCluster(cl)
parallel::stopCluster(cl)
cl <- parallel::makeCluster(n_cores)
AllOUT <- parallel::parLapply(cl, X = seq.int(n_cores),
fun = run_impute,
imp_args = imputator_args,
i_dir = install_dir,
ped_file = pedigree_file)
AllOUT
parallel::stopCluster(cl)
batch_names <- sapply(1:n_cores, function(x) glue::glue('batch_{formatC(x,width=3,flag=0)}'))
batch_names
# === combine imputation logs ===
edits_L <- list()
for (x in 1:n_cores) {
edits_L[[x]] <- read.table(glue::glue("{batch_names[x]}.edits"), header=TRUE)
}
sapply(edits_L, nrow)
head(edits_L[[1]])
edits_all <- plyr::ldply(edits_L)
dim(edits_all)
sum(sapply(edits_L, nrow))
head(edits_all)
write.table(edits_all, file='combined.edits', row.names=FALSE, col.names=TRUE, quote=FALSE)
# === apply edits to big genotype file  ===
system(glue::glue('{i_dir}/imputator {imp_args} ',  # repeat, in case it includes outFormat
'--geno geno_{batch_name_x} --edits-in combined.edits ',
'--informat PED --quiet'))
# === apply edits to big genotype file  ===
system(glue::glue('{install_dir}/imputator {imp_args} ',  # repeat, in case it includes outFormat
'--geno {geno_file} --edits-in combined.edits ',
'--informat PED --quiet'))
head(edits_all)
head(map)
?match
bla <- match(edits_all$snp_name, map[,2])
dim(bla)
length(bla)
head(bla)
tail(bla)
tail(edits_all)
# change SNP column indices to correspond to the original genotype file
edits_all$snp_index <- match(edits_all$snp_name, map[,2])
write.table(edits_all, file='combined.edits', row.names=FALSE, col.names=TRUE, quote=FALSE)
# === apply edits to big genotype file  ===
system(glue::glue('{install_dir}/imputator {imp_args} ',  # repeat, in case it includes outFormat
'--geno {geno_file} --edits-in combined.edits ',
'--informat PED --quiet'))
# === apply edits to big genotype file  ===
system(glue::glue('{install_dir}/imputator {imp_args} ',  # repeat, in case it includes outFormat
'--geno {geno_file} --edits-in combined.edits ',
'--informat PED --quiet'))
geno_file
cl <- parallel::makeCluster(n_cores)
AllOUT <- parallel::parLapply(cl, X = seq.int(n_cores),
fun = run_impute,
imp_args = imputator_args,
i_dir = install_dir,
ped_file = pedigree_file)
parallel::stopCluster(cl)
# === combine imputation logs ===
# NOTE: these files may possibly to get too big to be handled (comfortably) by R,
# then they need to be combined using cat & headers somehow discarded
# https://www.tutorialspoint.com/how-to-append-contents-of-multiple-files-into-one-file-on-linux
edits_L <- list()
for (x in 1:n_cores) {
edits_L[[x]] <- read.table(glue::glue("{batch_names[x]}.edits"), header=TRUE)
}
edits_all <- plyr::ldply(edits_L)
# change SNP column indices to correspond to the original genotype file
edits_all$snp_index <- match(edits_all$snp_name, map[,2])
write.table(edits_all, file='combined.edits', row.names=FALSE, col.names=TRUE, quote=FALSE)
# === apply edits to big genotype file  ===
system(glue::glue('{install_dir}/imputator {imp_args} ',  # repeat, in case it includes outFormat
'--geno {geno_file} --edits-in combined.edits ',
'--informat PED --quiet'))
# === clean up  ===
system('rm snp_batch_*.txt geno_batch_*.ped geno_batch_*.map batch_*.edits')
# === apply edits to big genotype file  ===
system(glue::glue('{install_dir}/imputator {imp_args} ',  # repeat, in case it includes outFormat
'--geno {geno_file} --edits-in combined.edits ',
'--informat PED --quiet'))
getwd()
# test parallel
source('/media/jisca/Data2/Fortran/Imputator/parallel/parallel_impute.R')
geno_file
normalizePath(geno_file)
getwd()
normalizePath('geno.txt')
?normalizePath
normalizePath(geno_file, mustWork=FALSE)
?path.expand
file.path('geno.txt')
file.path(current_dir, geno_file)
current_dir <- getwd()
file.path(current_dir, geno_file)
basename(geno_file)
test_file = normalizePath('geno.txt')
basename(test_file)
dirname(geno_file)
dirname(test_file)
getwd()
setwd('D:/Fortran/Imputator/test_YY')
setwd('/media/jisca/Data2/Fortran/Imputator/test_YY')
file.path(getwd(), 'tempdir')
# test parallel
source('/media/jisca/Data2/Fortran/Imputator/parallel/parallel_impute.R')
setwd('/media/jisca/Data2/Fortran/Imputator/test_YY')
parallel_impute(geno_file = 'geno3s_YYtest',
pedigree_file = 'pedigree_db_YY.txt',
install_dir = '..',
working_dir = file.path(getwd(), 'tempdir'),
n_cores = 5)
parallel_impute(geno_file = 'geno3s_YYtest',
pedigree_file = 'pedigree_db_YY.txt',
install_dir = '..',
working_dir = file.path(getwd(), 'tempdir'),
n_cores = 5)
file.path(getwd(), '..'),
file.path(getwd(), '..')
getwd()
setwd('/media/jisca/Data2/Fortran/Imputator/test_YY')
parallel_impute(geno_file = 'geno3s_YYtest',
pedigree_file = 'pedigree_db_YY.txt',
install_dir = '..',
working_dir = file.path(getwd(), 'tempdir'),
n_cores = 5)
setwd('/media/jisca/Data2/Fortran/Imputator/test_YY')
file.path(getwd(), '..')
parallel_impute(geno_file = 'geno3s_YYtest',
pedigree_file = 'pedigree_db_YY.txt',
install_dir = file.path(getwd(), '..'),
working_dir = file.path(getwd(), 'tempdir'),
n_cores = 5)
setwd('/media/jisca/Data2/Fortran/Imputator/test_YY')
parallel_impute(geno_file = 'geno3s_YYtest',
pedigree_file = 'pedigree_db_YY.txt',
install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(getwd(), 'tempdir'),
n_cores = 5)
parallel_impute(geno_file = 'geno3s_YYtest',
pedigree_file = 'pedigree_db_YY.txt',
compile = FALSE,
#                install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(getwd(), 'tempdir'),
n_cores = 5)
# test parallel
source('/media/jisca/Data2/Fortran/Imputator/parallel/parallel_impute.R')
parallel_impute(geno_file = 'geno3s_YYtest',
pedigree_file = 'pedigree_db_YY.txt',
compile = FALSE,
#                install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(getwd(), 'tempdir'),
n_cores = 5)
setwd('/media/jisca/Data2/Fortran/Imputator/test_YY')
parallel_impute(geno_file = 'geno3s_YYtest',
pedigree_file = 'pedigree_db_YY.txt',
compile = FALSE,
#                install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(getwd(), 'tempdir'),
n_cores = 5)
?system
# check if plink is working
bla <- system(glue::glue("{plink_cmd} --version"))
bla
plink_cmd
plink_cmd <- 'plink'
# check if plink is working
bla <- system(glue::glue("{plink_cmd} --version"))
bla
?system
# check if plink is working
plink_test <- system(glue::glue("{plink_cmd} --version"))
if (plink_test != 0)  stop(plink_cmd, " not found")
parallel_impute(geno_file = 'geno3s_YYtest',
pedigree_file = 'pedigree_db_YY.txt',
compile = FALSE,
#                install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(getwd(), 'tempdir'),
plink_cmd = 'plink1.9',
n_cores = 5)
getwd()
DIR <- '/media/jisca/Data2/Fortran/Imputator/test_YY'
setwd(DIR)
parallel_impute(geno_file = 'geno3s_YYtest',
pedigree_file = 'pedigree_db_YY.txt',
compile = FALSE,
#                install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(DIR, 'tempdir'),
plink_cmd = 'plink1.9',
n_cores = 5)
parallel_impute(geno_file = 'geno3s_YYtest',
pedigree_file = 'pedigree_db_YY.txt',
compile = FALSE,
install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(DIR, 'tempdir'),
plink_cmd = 'plink1.9',
n_cores = 5)
DIR <- '/media/jisca/Data2/Fortran/Imputator/test_YY'
setwd(DIR)
parallel_impute(geno_file = 'geno3s_YYtest',
pedigree_file = 'pedigree_db_YY.txt',
compile = FALSE,
install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(DIR, 'tempdir'),
plink_cmd = 'plink1.9',
n_cores = 5)
# test parallel
source('/media/jisca/Data2/Fortran/Imputator/parallel/parallel_impute.R')
# small test
DIR <- '/media/jisca/Data2/Fortran/Imputator/test_griffin'
setwd(DIR)
parallel_impute(geno_file = 'geno',
pedigree_file = 'Pedigree',
compile = TRUE,
install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(DIR, 'tempdir'),
plink_cmd = 'plink',
n_cores = 5)
# test parallel
source('/media/jisca/Data2/Fortran/Imputator/parallel/parallel_impute.R')
# small test
DIR <- '/media/jisca/Data2/Fortran/Imputator/test_griffin'
setwd(DIR)
parallel_impute(geno_file = 'geno',
pedigree_file = 'Pedigree',
compile = TRUE,
install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(DIR, 'tempdir'),
plink_cmd = 'plink',
n_cores = 5)
parallel_impute(geno_file = 'geno',
pedigree_file = 'Pedigree',
compile = TRUE,
install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(DIR, 'tempdir'),
plink_cmd = 'plink1.9',
n_cores = 5)
?dir.exist
?dir.exists
# test parallel
source('/media/jisca/Data2/Fortran/Imputator/parallel/parallel_impute.R')
# small test
DIR <- '/media/jisca/Data2/Fortran/Imputator/test_griffin'
setwd(DIR)
parallel_impute(geno_file = 'geno',
pedigree_file = 'Pedigree',
compile = TRUE,
install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(DIR, 'tempdir'),
plink_cmd = 'plink1.9',
n_cores = 5)
parallel_impute(geno_file = 'geno',
pedigree_file = 'Pedigree',
compile = TRUE,
install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(DIR, 'tempdir'),
plink_cmd = 'plink1.9',
n_cores = 5)
parallel_impute(geno_file = 'Geno',
pedigree_file = 'Pedigree',
compile = TRUE,
install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(DIR, 'tempdir'),
plink_cmd = 'plink1.9',
n_cores = 5)
# small test
DIR <- '/media/jisca/Data2/Fortran/Imputator/test_griffin'
setwd(DIR)
# test parallel
source('/media/jisca/Data2/Fortran/Imputator/parallel/parallel_impute.R')
# small test
DIR <- '/media/jisca/Data2/Fortran/Imputator/test_griffin'
setwd(DIR)
parallel_impute(geno_file = 'geno',
pedigree_file = 'Pedigree',
compile = TRUE,
install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(DIR, 'tempdir'),
plink_cmd = 'plink1.9',
n_cores = 5)
# test parallel
source('/media/jisca/Data2/Fortran/Imputator/parallel/parallel_impute.R')
# small test
DIR <- '/media/jisca/Data2/Fortran/Imputator/test_griffin'
setwd(DIR)
parallel_impute(geno_file = 'geno',
pedigree_file = 'Pedigree',
compile = TRUE,
install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(DIR, 'tempdir'),
plink_cmd = 'plink1.9',
n_cores = 5)
parallel_impute(geno_file = 'Geno',
pedigree_file = 'Pedigree',
compile = TRUE,
install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(DIR, 'tempdir'),
plink_cmd = 'plink1.9',
n_cores = 5)
parallel_impute(geno_file = 'Geno',
pedigree_file = 'Pedigree.txt',
compile = TRUE,
install_dir = '/media/jisca/Data2/Fortran/Imputator',
working_dir = file.path(DIR, 'tempdir'),
plink_cmd = 'plink1.9',
n_cores = 5)
install.pacakges('roxygen2')
install.packages('roxygen2')
install.packages('r.rsp')
install.packages('R.rsp')
?install.packages
install.packages(c('V8', 'qpdf', 'plyr', 'openxlsx', 'knitr', 'rmarkdown', 'bookdown', 'kinship2', 'R.rsp', 'hexbin', 'data.table'))
install.packages(c("V8", "qpdf", "plyr", "openxlsx", "knitr", "rmarkdown", "bookdown", "kinship2", "R.rsp", "hexbin", "data.table"))
install.packages('testthat')
?sequoia
dim(Geno_griffin)
dim(geno_griffin)
head(LH_griffin)
library(sequoia)
dim(geno_griffin)
dim(Geno_griffin)
OUT <- sequoia(Geno_griffin, LH_griffin, Module='par')
names(OUT)
OUT$DupLifeHistID
OUT$NoLH
library(testthat)
local_edition(3)
names(OUT$Specs)
cli_text(names(OTU$Specs))
cli::cli_text(names(OTU$Specs))
cli::cli_text(names(OUT$Specs))
?paste
paste(names(OUT$Specs), collapse=', ')
paste(names(OUT$Specs), collapse='", "')
?cli_text
bla <- names(OUT$Specs)[1:3]
paste(shQuote(bla), collapse=", ")
paste(shQuote(names(OUT$Specs)[1:3]), collapse=", ")
paste(shQuote(names(OUT$Specs)), collapse=", ")
install.packages('openxlsx')
